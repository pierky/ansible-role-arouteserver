---
- name: "Install ARouteServer dependencies"
  become: true
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  with_items:
    - "{% if ansible_distribution == 'centos' %}python-devel{% else %}{% if ansible_python_version is version('3.0', '>=') %}python3-dev{% else %}python-dev{% endif %}{% endif %}" # noqa: yaml[line-length]
    - "{% if ansible_distribution == 'centos' %}python-pip{% else %}{% if ansible_python_version is version('3.0', '>=') %}python3-pip{% else %}python-pip{% endif %}{% endif %}" # noqa: yaml[line-length]
    - "{% if ansible_distribution == 'centos' %}python-virtualenv{% else %}{% if ansible_python_version is version('3.0', '>=') %}python3-virtualenv{% else %}python-virutalenv{% endif %}{% endif %}" # noqa: yaml[line-length]
    - gcc

- name: "Upgrade pip and setuptools"
  ansible.builtin.pip:
    virtualenv: "{{ arouteserver_venv_dir }}"
    name:
      - pip
      - setuptools
    extra_args: "--upgrade"
  when: arouteserver_upgrade is defined and arouteserver_upgrade | bool

# Option 1: install from PyPI repository when arouteserver_local_package_file is not set.
# sets: arouteserver_pypi_install
- name: "Install PyPI package via pip"
  ansible.builtin.pip:
    virtualenv: "{{ arouteserver_venv_dir }}"
    name: arouteserver
    extra_args: "{% if arouteserver_upgrade is defined and arouteserver_upgrade %}--upgrade{% endif %}"
  register: arouteserver_pypi_install
  changed_when: >
    arouteserver_pypi_install.stdout is defined and (
    "for arouteserver: finished with status 'done'" in arouteserver_pypi_install.stdout or
    "Successfully installed arouteserver" in arouteserver_pypi_install.stdout
    )
  when: arouteserver_local_package_file is undefined or not arouteserver_local_package_file

# Option 2: install from local file when arouteserver_local_package_file is set.
# sets: arouteserver_local_package
- name: "Copy ARouteServer local package to host"
  ansible.builtin.copy:
    src: "{{ arouteserver_local_package_file }}"
    dest: "{{ arouteserver_var }}/arouteserver.tar.gz"
    mode: ug=rw,o=r
  when: >
    arouteserver_local_package_file is defined
    and
    arouteserver_local_package_file
    and
    arouteserver_upgrade
  register: arouteserver_local_package

- name: "Install local package via pip"
  ansible.builtin.pip:
    virtualenv: "{{ arouteserver_venv_dir }}"
    name: "{{ arouteserver_var }}/arouteserver.tar.gz"
    extra_args: "{% if arouteserver_upgrade is defined and arouteserver_upgrade %}--upgrade{% endif %}"
  register: arouteserver_local_install
  changed_when: >
    "for arouteserver: finished with status 'done'" in arouteserver_local_install.stdout or
    "Successfully installed arouteserver" in arouteserver_local_install.stdout
  when: arouteserver_local_package_file is defined and arouteserver_local_package_file and arouteserver_local_package.changed

- name: "Does the arouteserver directory exist?"
  ansible.builtin.stat:
    path: "{{ arouteserver_dir }}"
  register: arouteserver_dir_exists

- name: "Run 'arouteserver setup'"
  ansible.builtin.command: "{{ arouteserver_bin }} setup --dest-dir {{ arouteserver_dir }}"
  register: arouteserver_setup
  when: >
    not arouteserver_dir_exists.stat.exists
    and
    arouteserver_upgrade
  changed_when: true

- name: "Copy any local custom file to {{ arouteserver_dir }}"
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ arouteserver_dir }}/"
    mode: ug=rw,o=r
  with_fileglob:
    - ../templates/config/*
  register: custom_files

- name: "Run 'arouteserver setup-templates'"
  ansible.builtin.command: "{{ arouteserver_bin }} setup-templates"
  when: >
    (
      arouteserver_pypi_install.changed
      or
      arouteserver_local_install.changed
    )
    and
    arouteserver_upgrade
  notify:
    - "arouteserver: reconfigure general policies"
    - "arouteserver: rebuild rs config files"
  changed_when: true
